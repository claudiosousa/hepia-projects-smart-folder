Arbre de fichiers non cyclique

Le cahier des charges spécifie que la recherche des fichiers doit etre recursive et suivre les liens symboliques. Ceci signifie que le programe doit pouvoir eviter les boucles, possibles en suivant les liens symboliques.
Possibilité d'implementation: garder dans une hashtable les inodes parcurus, et chaque fois que lon parcoure un fichier/folder veifier que le inode n'est pas deja present dans la hashtable


Effacer les liens symboliques créées

Il est possible que des fichiers pour lequels le smartfolder a créer des liens disparaissent pendant l'execution du programme. Dans ce cas, on veut que les liens symboliques crées pour ces fichiers soient détruits.
Deux possibilitées d'implementation:
 1. a chaque iteration du smart folder, l'on mantien une hashtable des fichiers trouvés. A la prochaine iteration, on enleve de la hashtable t-1 tous les fichiers trouvées à t. A la fin, les chemins qui restent dans la hashtable sont ceux que l'on n'as pas trouvé dans le disque dur et qui doivent être effacées.
 2. A la fin de chaquer iteration de création de liens symboliques, on fait une passe sur tous les liens symboliques créés et on verifie pour chaqu'un que le chemin pointé exist. On efface ceux don't le chemin n'existe plus. Cette option est pour l'instant le choix d'implementation priviligié due a la simplicité d'implémentation.


Expressions de filtering

L'utilisateur doit pouvoir specifier des combinaisons logiques entre des difierents criteres de filtrage. Dans sont implémentation la plus simple, tous les criteres utilisées dans une expression sont obligatoires ("et" logique).
Une implémentation plus sophestiquée permetrait à l'utilisateur de spécifier des combinaisons de "ou" et "et" logiques ainsi que des parantéses.
Cette version dernière version, si implémentée, devra se baser sur l'algoritme de shunting-yard (url: https://en.wikipedia.org/wiki/Shunting-yard_algorithm) (par  Edsger Dijkstra)

Selon le temps qui nous aurons a dispositions, nous implémenterons soit la versions simple, soit la version compléte.


Communication inter-process
Le process tourne en background (daemon) et sont arret doit s'effectuer en lancant une autres instance du smart folder avec les parameters appropriés. Cela implique que la nouvelle instance de smartfolder doit pouvour communiquer avec l'autre instance de smart folder. Cette cominication se fera par des signaux POSIX. De manière generale, un daemon du smartfolder doit pouvoir ecouter les signaux de fin reçus SIGTERM et SIGKILL etnettoyer les ressources utilisées (File descriptors, memoire allouée, liens créés, etc) avant sa fermeture.


